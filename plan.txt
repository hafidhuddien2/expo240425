npm install firebase
npx expo install expo-auth-session expo-web-browser

////

// firebaseConfig.js
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  // ... other config
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);

export { auth };

//

// LoginScreen.js
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  Button,
  TouchableOpacity,
  StyleSheet,
  Image,
  Alert,
} from 'react-native';
import * as WebBrowser from 'expo-web-browser';
import * as Google from 'expo-auth-session/providers/google';
import { signInWithCredential, GoogleAuthProvider } from 'firebase/auth';
import { auth } from './firebaseConfig';

WebBrowser.maybeCompleteAuthSession();

export default function LoginScreen() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const [request, response, promptAsync] = Google.useAuthRequest({
    expoClientId: 'YOUR_EXPO_CLIENT_ID.apps.googleusercontent.com',
  });

  React.useEffect(() => {
    if (response?.type === 'success') {
      const { id_token } = response.params;
      const credential = GoogleAuthProvider.credential(id_token);
      signInWithCredential(auth, credential)
        .then(() => Alert.alert('Logged in with Google!'))
        .catch(err => Alert.alert('Google login error', err.message));
    }
  }, [response]);

  const handleLogin = () => {
    Alert.alert('Login disabled (on development)');
  };

  return (
    <View style={styles.container}>
      <View style={styles.loginContainer}>
        <Text style={styles.header}>Login</Text>

        <TextInput
          style={styles.input}
          placeholder="Email"
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
          autoCapitalize="none"
        />
        {email === '' && <Text style={styles.error}>Email is required.</Text>}

        <TextInput
          style={styles.input}
          placeholder="Password"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
        />
        {password === '' && <Text style={styles.error}>Password is required.</Text>}

        <Button title="Login (on development)" onPress={handleLogin} disabled />
      </View>

      <View style={[styles.loginContainer, styles.googleContainer]}>
        <TouchableOpacity
          style={styles.googleButton}
          onPress={() => promptAsync()}
        >
          <Image
            source={{
              uri: 'https://www.gstatic.com/images/branding/product/1x/googleg_32dp.png',
            }}
            style={styles.googleIcon}
          />
          <Text style={styles.googleText}>Login with Google</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

//

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    padding: 16,
  },
  loginContainer: {
    width: '100%',
    maxWidth: 400,
    padding: 20,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    backgroundColor: '#f9f9f9',
    marginVertical: 10,
  },
  header: {
    textAlign: 'center',
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  input: {
    height: 40,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 4,
    paddingHorizontal: 10,
    marginBottom: 10,
  },
  error: {
    color: 'red',
    fontSize: 12,
    marginBottom: 10,
  },
  googleContainer: {
    marginTop: 20,
  },
  googleButton: {
    backgroundColor: 'white',
    borderRadius: 5,
    padding: 10,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 10,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  googleIcon: {
    width: 24,
    height: 24,
    marginRight: 10,
  },
  googleText: {
    fontSize: 16,
  },
});


//

const firebaseConfig = {
  apiKey: 'AIzaSyAiUj6fncHE7B4JjQ7MPKIDQbX1MrbGWA0',
  authDomain: 'open-qr.firebaseapp.com',
  projectId: 'open-qr',
  storageBucket: 'open-qr.firebasestorage.app',
  messagingSenderId: '561353171862',
  appId: '1:561353171862:web:45846df9c348decb2e73b7',
  measurementId: 'G-0LCHGSZ9PS',
};